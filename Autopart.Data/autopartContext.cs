// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Autopart.Domain.Models;
using Autopart.Domain.SharedKernel;
using Microsoft.EntityFrameworkCore;

namespace Autopart.Data;

public partial class autopartContext : DbContext,IUnitOfWork
{
    public autopartContext(DbContextOptions<autopartContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Domain.Models.Attribute> Attributes { get; set; }

    public virtual DbSet<Author> Authors { get; set; }

    public virtual DbSet<Balance> Balances { get; set; }

    public virtual DbSet<Banner> Banners { get; set; }

    public virtual DbSet<Billing> Billings { get; set; }

    public virtual DbSet<BillingAddress> BillingAddresses { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CategoryTranslation> CategoryTranslations { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Engine> Engines { get; set; }

    public virtual DbSet<FlashSaleImage> FlashSaleImages { get; set; }

    public virtual DbSet<Gallery> Galleries { get; set; }

    public virtual DbSet<HomePage> HomePages { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Manufacture> Manufactures { get; set; }

    public virtual DbSet<ManufacturerModel> ManufacturerModels { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderLine> OrderLines { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductTag> ProductTags { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<PromotionalSlider> PromotionalSliders { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<RefundReason> RefundReasons { get; set; }

    public virtual DbSet<Setting> Settings { get; set; }

    public virtual DbSet<Shipping> Shippings { get; set; }

    public virtual DbSet<ShippingAddress> ShippingAddresses { get; set; }

    public virtual DbSet<Shop> Shops { get; set; }

    public virtual DbSet<ShopSocial> ShopSocials { get; set; }

    public virtual DbSet<Social> Socials { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<SubCategoryList> SubCategoryLists { get; set; }

    public virtual DbSet<Svcrelation> Svcrelations { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Tax> Taxes { get; set; }

    public virtual DbSet<Temp> Temps { get; set; }

    public virtual DbSet<Domain.Models.Type> Types { get; set; }

    public virtual DbSet<UserWishlist> UserWishlists { get; set; }

    public virtual DbSet<Value> Values { get; set; }

    public virtual DbSet<VendorOrderRelation> VendorOrderRelations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Addresses_pkey");

            entity.HasIndex(e => e.ShippingId, "IX_Addresses_ShippingId");

            entity.HasIndex(e => e.ShopId, "IX_Addresses_ShopId");

            entity.HasIndex(e => e.UserId, "IX_Addresses_UserId");

            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.State).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Zip).HasMaxLength(10);

            entity.HasOne(d => d.Shipping).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.ShippingId)
                .HasConstraintName("fk_shippings");

            entity.HasOne(d => d.Shop).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("Addresses_ShopId_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("Addresses_UserId_fkey");
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("AspNetRoles_pkey");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("AspNetRoleClaims_pkey");

            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.Property(e => e.ClaimType).HasMaxLength(255);

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("AspNetRoleClaims_RoleId_fkey");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("AspNetUsers_pkey");

            entity.Property(e => e.ConcurrencyStamp).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.LockoutEnd).HasColumnType("timestamp without time zone");
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            entity.Property(e => e.ProfileImage).HasColumnType("character varying");
            entity.Property(e => e.SecurityStamp).HasMaxLength(255);
            entity.Property(e => e.StripeDashboardAccess).HasMaxLength(255);
            entity.Property(e => e.StripeVendorId).HasMaxLength(255);
            entity.Property(e => e.StripeVendorStatus).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.UserName).HasMaxLength(255);
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("AspNetUserClaims_pkey");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("AspNetUserClaims_UserId_fkey");
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey }).HasName("AspNetUserLogins_pkey");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.Property(e => e.LoginProvider).HasMaxLength(450);
            entity.Property(e => e.ProviderKey).HasMaxLength(450);
            entity.Property(e => e.ProviderDisplayName).HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("AspNetUserLogins_UserId_fkey");
        });

        modelBuilder.Entity<AspNetUserRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("AspNetUserRoles_pkey");

            entity.HasIndex(e => e.RoleId, "IX_AspNetUserRoles_RoleId");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserRoles_UserId");

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetUserRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("AspNetUserRoles_RoleId_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserRoles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("AspNetUserRoles_UserId_fkey");
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name }).HasName("AspNetUserTokens_pkey");

            entity.Property(e => e.LoginProvider).HasMaxLength(450);
            entity.Property(e => e.Name).HasMaxLength(450);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("AspNetUserTokens_UserId_fkey");
        });

        modelBuilder.Entity<Domain.Models.Attribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Attributes_pkey");

            entity.HasIndex(e => e.UserId, "IX_Attributes_UserId");

            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);

            entity.HasOne(d => d.Shop).WithMany(p => p.Attributes)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_Attribute_Shop");

            entity.HasOne(d => d.User).WithMany(p => p.Attributes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("Attributes_UserId_fkey");
        });

        modelBuilder.Entity<Author>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Authors_pkey");

            entity.HasIndex(e => e.ImageId, "IX_Authors_ImageId");

            entity.HasIndex(e => e.ShopId, "IX_Authors_ShopId");

            entity.Property(e => e.Born).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Death).HasMaxLength(255);
            entity.Property(e => e.DeletedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Languages).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.Image).WithMany(p => p.Authors)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("fk_image");

            entity.HasOne(d => d.Shop).WithMany(p => p.Authors)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("fk_shop");
        });

        modelBuilder.Entity<Balance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Balance_pkey");

            entity.ToTable("Balance");

            entity.HasIndex(e => e.AccountNumber, "Balance_AccountNumber_key").IsUnique();

            entity.HasIndex(e => e.ShopId, "Balance_ShopId_key").IsUnique();

            entity.Property(e => e.AccountHolderEmail).HasMaxLength(255);
            entity.Property(e => e.AccountHolderName).HasMaxLength(255);
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.CurrentBalance).HasPrecision(10, 2);
            entity.Property(e => e.TotalEarnings).HasPrecision(10, 2);
            entity.Property(e => e.UpdatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.WithDrawnAmount).HasPrecision(10, 2);

            entity.HasOne(d => d.ShopNavigation).WithOne(p => p.Balance)
                .HasForeignKey<Balance>(d => d.ShopId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("Balance_ShopId_fkey");
        });

        modelBuilder.Entity<Banner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Banners_pkey");

            entity.HasIndex(e => e.ImageId, "IX_Banners_ImageId");

            entity.HasIndex(e => e.ProductId, "IX_Banners_ProductId");

            entity.HasIndex(e => e.TypeId, "IX_Banners_TypeId");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("Created_at");
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("Updated_at");

            entity.HasOne(d => d.Image).WithMany(p => p.Banners)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("Banners_ImageId_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.Banners)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Type).WithMany(p => p.Banners)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("Banners_TypeId_fkey");
        });

        modelBuilder.Entity<Billing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Billings_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.TrackingNo).HasMaxLength(100);
            entity.Property(e => e.Type).HasMaxLength(100);

            entity.HasOne(d => d.Order).WithMany(p => p.Billings)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_order");
        });

        modelBuilder.Entity<BillingAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("BillingAddress_pkey");

            entity.ToTable("BillingAddress");

            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.State).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Zip).HasMaxLength(20);

            entity.HasOne(d => d.Billing).WithMany(p => p.BillingAddresses)
                .HasForeignKey(d => d.BillingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_billing");

            entity.HasOne(d => d.Order).WithMany(p => p.BillingAddresses)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_order");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Categories_pkey");

            entity.HasIndex(e => e.ParentId, "IX_Categories_ParentId");

            entity.HasIndex(e => e.TypeId, "IX_Categories_TypeId");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Icon).HasMaxLength(255);
            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Size).HasMaxLength(50);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.Image).WithMany(p => p.Categories)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Categories_ImageId");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("Categories_ParentId_fkey");

            entity.HasOne(d => d.Type).WithMany(p => p.Categories)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("fk_type");
        });

        modelBuilder.Entity<CategoryTranslation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("CategoryTranslations_pkey");

            entity.HasIndex(e => e.CategoryId, "IX_CategoryTranslations_CategoryId");

            entity.Property(e => e.Language).HasMaxLength(10);

            entity.HasOne(d => d.Category).WithMany(p => p.CategoryTranslations)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("CategoryTranslations_CategoryId_fkey");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Coupons_pkey");

            entity.HasIndex(e => e.ShopId, "IX_Coupons_ShopId");

            entity.Property(e => e.Amount).HasPrecision(10, 2);
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.MinimumCartAmount).HasPrecision(10, 2);
            entity.Property(e => e.TranslatedLanguages).HasColumnType("character varying(255)[]");

            entity.HasOne(d => d.Shop).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("fk_shops");
        });

        modelBuilder.Entity<Engine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Engine_pkey");

            entity.ToTable("Engine");

            entity.Property(e => e.Engine1)
                .HasMaxLength(255)
                .HasColumnName("Engine");
            entity.Property(e => e.HollanderCode).HasMaxLength(255);

            entity.HasOne(d => d.Category).WithMany(p => p.Engines)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("fk_category");

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.Engines)
                .HasForeignKey(d => d.ManufacturerId)
                .HasConstraintName("fk_manufacturer");

            entity.HasOne(d => d.Model).WithMany(p => p.Engines)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("fk_model");

            entity.HasOne(d => d.Subcategory).WithMany(p => p.Engines)
                .HasForeignKey(d => d.SubcategoryId)
                .HasConstraintName("fk_subcategory");
        });

        modelBuilder.Entity<FlashSaleImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("FlashSaleImages_pkey");

            entity.Property(e => e.Images).HasMaxLength(255);
        });

        modelBuilder.Entity<Gallery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Galleries_pkey");

            entity.HasIndex(e => e.ProductId, "IX_Galleries_ProductId");

            entity.HasOne(d => d.Product).WithMany(p => p.Galleries)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("Galleries_ProductId_fkey");
        });

        modelBuilder.Entity<HomePage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("HomePages_pkey");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Images_pkey");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
        });

        modelBuilder.Entity<Manufacture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Manufactures_pkey");

            entity.HasIndex(e => e.BannerId, "IX_Manufactures_BannerId");

            entity.HasIndex(e => e.ImageId, "IX_Manufactures_ImageId");

            entity.HasIndex(e => e.PromotionalSliderId, "IX_Manufactures_PromotionalSliderId");

            entity.HasIndex(e => e.SocialId, "IX_Manufactures_SocialId");

            entity.HasIndex(e => e.TypeId, "IX_Manufactures_TypeId");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Language).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Website).HasMaxLength(255);

            entity.HasOne(d => d.Banner).WithMany(p => p.Manufactures)
                .HasForeignKey(d => d.BannerId)
                .HasConstraintName("fk_banner");

            entity.HasOne(d => d.Image).WithMany(p => p.Manufactures)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("Manufactures_ImageId_fkey");

            entity.HasOne(d => d.PromotionalSlider).WithMany(p => p.Manufactures)
                .HasForeignKey(d => d.PromotionalSliderId)
                .HasConstraintName("fk_promotionalslider");

            entity.HasOne(d => d.Social).WithMany(p => p.Manufactures)
                .HasForeignKey(d => d.SocialId)
                .HasConstraintName("Manufactures_SocialId_fkey");

            entity.HasOne(d => d.Type).WithMany(p => p.Manufactures)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("Manufactures_TypeId_fkey");

            entity.HasMany(d => d.Types).WithMany(p => p.Manufacturers)
                .UsingEntity<Dictionary<string, object>>(
                    "ManufacturerType",
                    r => r.HasOne<Domain.Models.Type>().WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("ManufacturerType_TypeId_fkey"),
                    l => l.HasOne<Manufacture>().WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("ManufacturerType_ManufacturerId_fkey"),
                    j =>
                    {
                        j.HasKey("ManufacturerId", "TypeId").HasName("ManufacturerType_pkey");
                        j.ToTable("ManufacturerType");
                        j.HasIndex(new[] { "TypeId" }, "IX_ManufacturerType_TypeId");
                    });
        });

        modelBuilder.Entity<ManufacturerModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ManufacturerModels_pkey");

            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.ManufacturerModels)
                .HasForeignKey(d => d.ManufacturerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ManufacturerModels_ManufacturerId_fkey");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Orders_pkey");

            entity.HasIndex(e => e.CustomerId, "IX_Orders_CustomerId");

            entity.HasIndex(e => e.ShopId, "IX_Orders_ShopId");

            entity.HasIndex(e => e.StatusId, "IX_Orders_StatusId");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(50)
                .HasDefaultValueSql("'Pending'::character varying");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("Orders_CustomerId_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.Orders)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_shop");

            entity.HasOne(d => d.Status).WithMany(p => p.Orders)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("fk_orderstatus");
        });

        modelBuilder.Entity<OrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("OrderLines_pkey");

            entity.HasIndex(e => e.OrderId, "IX_OrderLines_OrderId");

            entity.HasIndex(e => e.ProductId, "IX_OrderLines_ProductId");

            entity.Property(e => e.DeliveryTime)
                .HasMaxLength(100)
                .HasColumnName("Delivery_Time");
            entity.Property(e => e.Language).HasMaxLength(50);

            entity.HasOne(d => d.Order).WithMany(p => p.OrderLines)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("OrderLines_OrderId_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderLines)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("OrderLines_ProductId_fkey");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("OrderStatus_pkey");

            entity.ToTable("OrderStatus");

            entity.Property(e => e.Color).HasMaxLength(20);
            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("timestamp without time zone");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PaymentHistory_pkey");

            entity.ToTable("PaymentHistory");

            entity.Property(e => e.ChargedAmount).HasPrecision(10, 2);
            entity.Property(e => e.PaymentId).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.VendorId).HasMaxLength(255);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Products_pkey");

            entity.HasIndex(e => e.AuthorId, "IX_Products_AuthorId");

            entity.HasIndex(e => e.CategoryId, "IX_Products_CategoryId");

            entity.HasIndex(e => e.ImageId, "IX_Products_ImageId");

            entity.HasIndex(e => e.ManufacturerId, "IX_Products_ManufacturerId");

            entity.HasIndex(e => e.PromotionalSliderId, "IX_Products_PromotionalSliderId");

            entity.HasIndex(e => e.ShopId, "IX_Products_ShopId");

            entity.HasIndex(e => e.TagId, "IX_Products_TagId");

            entity.Property(e => e.Color).HasMaxLength(50);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Damage).HasDefaultValue((short)0);
            entity.Property(e => e.DeletedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Drivetrain).HasMaxLength(50);
            entity.Property(e => e.ExternalProductButtonText).HasMaxLength(255);
            entity.Property(e => e.Grade).HasMaxLength(10);
            entity.Property(e => e.Height).HasPrecision(10, 2);
            entity.Property(e => e.HollanderIc)
                .HasMaxLength(50)
                .HasColumnName("Hollander IC");
            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Length).HasPrecision(10, 2);
            entity.Property(e => e.MaxPrice).HasPrecision(10, 2);
            entity.Property(e => e.MinPrice).HasPrecision(10, 2);
            entity.Property(e => e.Model).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.NewUsed)
                .HasMaxLength(10)
                .HasColumnName("New/Used");
            entity.Property(e => e.OemPartNumber)
                .HasMaxLength(50)
                .HasColumnName("OEM Part Number");
            entity.Property(e => e.PartslinkNumber)
                .HasMaxLength(50)
                .HasColumnName("Partslink Number");
            entity.Property(e => e.Price).HasPrecision(10, 2);
            entity.Property(e => e.ProductType).HasMaxLength(50);
            entity.Property(e => e.Ratings).HasPrecision(3, 2);
            entity.Property(e => e.SalePrice).HasPrecision(10, 2);
            entity.Property(e => e.Site).HasMaxLength(10);
            entity.Property(e => e.Sku).HasMaxLength(50);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.StockNumber)
                .HasMaxLength(50)
                .HasColumnName("Stock Number");
            entity.Property(e => e.TagNumber)
                .HasMaxLength(50)
                .HasColumnName("Tag Number");
            entity.Property(e => e.Transmission).HasMaxLength(50);
            entity.Property(e => e.TrimLevel)
                .HasMaxLength(50)
                .HasColumnName("Trim Level");
            entity.Property(e => e.Unit).HasMaxLength(50);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Vin)
                .HasMaxLength(50)
                .HasColumnName("VIN");
            entity.Property(e => e.Width).HasPrecision(10, 2);

            entity.HasOne(d => d.Author).WithMany(p => p.Products)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("fk_author");

            entity.HasOne(d => d.Category).WithMany(p => p.ProductsNavigation)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("fk_category");

            entity.HasOne(d => d.Engine).WithMany(p => p.Products)
                .HasForeignKey(d => d.EngineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_products_engine");

            entity.HasOne(d => d.Image).WithMany(p => p.Products)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("Products_ImageId_fkey");

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.Products)
                .HasForeignKey(d => d.ManufacturerId)
                .HasConstraintName("fk_manufacture");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.Products)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_products_manufacturermodel");

            entity.HasOne(d => d.PromotionalSlider).WithMany(p => p.Products)
                .HasForeignKey(d => d.PromotionalSliderId)
                .HasConstraintName("fk_promotionalslider");

            entity.HasOne(d => d.Shop).WithMany(p => p.Products)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("Products_ShopId_fkey");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.SubCategoryId)
                .HasConstraintName("fk_product_subcategorylist");

            entity.HasOne(d => d.Tag).WithMany(p => p.Products)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("fk_tag");

            entity.HasMany(d => d.Categories).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "CategoriesProduct",
                    r => r.HasOne<Category>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("Categories_Products_CategoryId_fkey"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("Categories_Products_ProductId_fkey"),
                    j =>
                    {
                        j.HasKey("ProductId", "CategoryId").HasName("Categories_Products_pkey");
                        j.ToTable("Categories_Products");
                        j.HasIndex(new[] { "CategoryId" }, "IX_Categories_Products_CategoryId");
                    });
        });

        modelBuilder.Entity<ProductTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ProductTags_pkey");

            entity.HasIndex(e => e.ProductId, "IX_ProductTags_ProductId");

            entity.HasIndex(e => e.TagId, "IX_ProductTags_TagId");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("ProductTags_ProductId_fkey");

            entity.HasOne(d => d.Tag).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("ProductTags_TagId_fkey");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Profiles_pkey");

            entity.HasIndex(e => e.CustomerId, "IX_Profiles_CustomerId");

            entity.HasIndex(e => e.ImageId, "IX_Profiles_ImageId");

            entity.HasIndex(e => e.ProductId, "IX_Profiles_ProductId");

            entity.HasIndex(e => e.SocialId, "IX_Profiles_SocialId");

            entity.Property(e => e.Avatar).HasMaxLength(255);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.Customer).WithMany(p => p.Profiles)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("Profiles_CustomerId_fkey");

            entity.HasOne(d => d.Image).WithMany(p => p.Profiles)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("fk_image");

            entity.HasOne(d => d.Product).WithMany(p => p.Profiles)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Social).WithMany(p => p.Profiles)
                .HasForeignKey(d => d.SocialId)
                .HasConstraintName("fk_social");
        });

        modelBuilder.Entity<PromotionalSlider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PromotionalSliders_pkey");

            entity.HasIndex(e => e.TypeId, "IX_PromotionalSliders_TypeId");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.Type).WithMany(p => p.PromotionalSliders)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("PromotionalSliders_TypeId_fkey");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Questions_pkey");

            entity.Property(e => e.AbusiveReportsCount).HasDefaultValue(0);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.NegativeFeedbacksCount).HasDefaultValue(0);
            entity.Property(e => e.PositiveFeedbacksCount).HasDefaultValue(0);
            entity.Property(e => e.Question1).HasColumnName("Question");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.Product).WithMany(p => p.Questions)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("Questions_ProductId_fkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.Questions)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("Questions_ShopId_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Questions)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("Questions_UserId_fkey");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Ratings_pkey");

            entity.Property(e => e.Comments).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Rating1).HasColumnName("Rating");

            entity.HasOne(d => d.Order).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("fk_order");

            entity.HasOne(d => d.Product).WithMany(p => p.RatingsNavigation)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Ratings_ProductId_fkey");
        });

        modelBuilder.Entity<RefundReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("RefundReason_pkey");

            entity.ToTable("RefundReason");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.DeletedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasKey(e => e.ShopId).HasName("Settings_pkey");

            entity.HasIndex(e => e.ProductId, "IX_Settings_ProductId");

            entity.Property(e => e.ShopId).ValueGeneratedNever();
            entity.Property(e => e.Contact).HasMaxLength(20);
            entity.Property(e => e.LocationCity).HasMaxLength(100);
            entity.Property(e => e.LocationCountry).HasMaxLength(100);
            entity.Property(e => e.LocationLat).HasPrecision(10, 8);
            entity.Property(e => e.LocationLng).HasPrecision(11, 8);
            entity.Property(e => e.LocationState).HasMaxLength(100);
            entity.Property(e => e.LocationZip).HasMaxLength(255);

            entity.HasOne(d => d.Product).WithMany(p => p.Settings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Shop).WithOne(p => p.Setting)
                .HasForeignKey<Setting>(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Settings_ShopId_fkey");
        });

        modelBuilder.Entity<Shipping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Shippings_pkey");

            entity.HasIndex(e => e.OrderId, "IX_Shippings_OrderId");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.TrackingNo).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(255);

            entity.HasOne(d => d.Order).WithMany(p => p.Shippings)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("Shippings_OrderId_fkey");
        });

        modelBuilder.Entity<ShippingAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ShippingAddress_pkey");

            entity.ToTable("ShippingAddress");

            entity.HasIndex(e => e.OrderId, "IX_ShippingAddress_OrderId");

            entity.HasIndex(e => e.ShippingId, "IX_ShippingAddress_ShippingId");

            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.State).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Zip).HasMaxLength(10);

            entity.HasOne(d => d.Order).WithMany(p => p.ShippingAddresses)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("ShippingAddress_OrderId_fkey");

            entity.HasOne(d => d.Shipping).WithMany(p => p.ShippingAddresses)
                .HasForeignKey(d => d.ShippingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ShippingAddress_ShippingId");
        });

        modelBuilder.Entity<Shop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Shops_pkey");

            entity.HasIndex(e => e.CoverImageId, "IX_Shops_CoverImageId");

            entity.HasIndex(e => e.LogoImageId, "IX_Shops_LogoImageId");

            entity.Property(e => e.CertificateUrl).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");

            entity.HasOne(d => d.CoverImage).WithMany(p => p.ShopCoverImages)
                .HasForeignKey(d => d.CoverImageId)
                .HasConstraintName("Shops_CoverImageId_fkey");

            entity.HasOne(d => d.LogoImage).WithMany(p => p.ShopLogoImages)
                .HasForeignKey(d => d.LogoImageId)
                .HasConstraintName("Shops_LogoImageId_fkey");
        });

        modelBuilder.Entity<ShopSocial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ShopSocials_pkey");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopSocials)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("ShopSocials_ShopId_fkey");

            entity.HasOne(d => d.Social).WithMany(p => p.ShopSocials)
                .HasForeignKey(d => d.SocialId)
                .HasConstraintName("ShopSocials_SocialId_fkey");
        });

        modelBuilder.Entity<Social>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Socials_pkey");

            entity.HasIndex(e => e.ProductId, "IX_Socials_ProductId");

            entity.HasIndex(e => e.ShopId, "IX_Socials_ShopId");

            entity.Property(e => e.Icon).HasMaxLength(255);

            entity.HasOne(d => d.Product).WithMany(p => p.Socials)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Shop).WithMany(p => p.Socials)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("Socials_ShopId_fkey");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("OrderStatuses_pkey");

            entity.ToTable("Status");

            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("timestamp without time zone");
        });

        modelBuilder.Entity<SubCategoryList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SubCategoryList_pkey");

            entity.ToTable("SubCategoryList");

            entity.HasIndex(e => new { e.CategoryId, e.Subcategory }, "SubCategoryList_CategoryId_Subcategory_key").IsUnique();

            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.Subcategory).HasMaxLength(255);

            entity.HasOne(d => d.Category).WithMany(p => p.SubCategoryLists)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("SubCategoryList_CategoryId_fkey");
        });

        modelBuilder.Entity<Svcrelation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("SVCRelation_pkey");

            entity.ToTable("SVCRelation");

            entity.Property(e => e.Price).HasPrecision(18, 2);
            entity.Property(e => e.Size).HasMaxLength(50);

            entity.HasOne(d => d.Shop).WithMany(p => p.Svcrelations)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("SVCRelation_ShopId_fkey");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Tags_pkey");

            entity.HasIndex(e => e.ImageId, "IX_Tags_ImageId");

            entity.HasIndex(e => e.TypeId, "IX_Tags_TypeId");

            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.TranslatedLanguages).HasColumnType("character varying(255)[]");

            entity.HasOne(d => d.Image).WithMany(p => p.Tags)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("fk_image");

            entity.HasOne(d => d.Type).WithMany(p => p.Tags)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("Tags_TypeId_fkey");
        });

        modelBuilder.Entity<Tax>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Tax_pkey");

            entity.ToTable("Tax");

            entity.HasIndex(e => e.State, "unique_state").IsUnique();

            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Priority).HasMaxLength(255);
            entity.Property(e => e.Rate).HasPrecision(10, 2);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Zip).HasMaxLength(255);
        });

        modelBuilder.Entity<Temp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Temp_pkey");

            entity.ToTable("Temp");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Domain.Models.Type>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Types_pkey");

            entity.HasIndex(e => e.ProductId, "IX_Types_ProductId");

            entity.Property(e => e.Logo).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);

            entity.HasOne(d => d.Product).WithMany(p => p.Types)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<UserWishlist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("UserWishlist_pkey");

            entity.ToTable("UserWishlist");

            entity.HasIndex(e => new { e.UserId, e.ProductId }, "UQ_UserWishlist_UserProduct").IsUnique();

            entity.HasOne(d => d.Product).WithMany(p => p.UserWishlists)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_UserWishlist_Products");

            entity.HasOne(d => d.User).WithMany(p => p.UserWishlists)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserWishlist_AspNetUsers");
        });

        modelBuilder.Entity<Value>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Values_pkey");

            entity.HasIndex(e => e.AttributeId, "IX_Values_AttributeId");

            entity.Property(e => e.Language).HasMaxLength(10);
            entity.Property(e => e.Meta).HasMaxLength(255);
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.Value1)
                .HasMaxLength(255)
                .HasColumnName("Value");

            entity.HasOne(d => d.Attribute).WithMany(p => p.Values)
                .HasForeignKey(d => d.AttributeId)
                .HasConstraintName("Values_AttributeId_fkey");
        });

        modelBuilder.Entity<VendorOrderRelation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("VendorOrderRelations_pkey");

            entity.HasOne(d => d.Order).WithMany(p => p.VendorOrderRelations)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("VendorOrderRelations_OrderId_fkey");

            entity.HasOne(d => d.Vendor).WithMany(p => p.VendorOrderRelations)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("VendorOrderRelations_VendorId_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}